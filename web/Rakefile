# Copyright 2014 Google Inc. All rights reserved.
#
# Use of this source code is governed by The MIT License.
# See the LICENSE file for details.

require 'fileutils'
require 'sass'
require 'autoprefixer-rails'


SITE = "_site"
STAGING_AREA = "../../spfjs-gh-pages"

LOCAL_WSK = "assets/vendor"
LOCAL_IMAGES = "#{LOCAL_WSK}/images"
LOCAL_STYLES = "#{LOCAL_WSK}/styles"

WSK = "../vendor/web-starter-kit"
WSK_IMAGES = "#{WSK}/app/images"
WSK_STYLES = "#{WSK}/app/styles"

OCTICONS = "../vendor/octicons"

AUTOPREFIXER_BROWSERS = [
  'ie >= 10',
  'ie_mob >= 10',
  'ff >= 30',
  'chrome >= 34',
  'safari >= 7',
  'opera >= 23',
  'ios >= 7',
  'android >= 4.4',
  'bb >= 10'
]


# The WSK files might need to be downloaded.
# WSK @43823c9.
wsk_url = "https://github.com/google/web-starter-kit/archive/43823c998e90567d9b365336af4041e07b6d6d10.tar.gz"
wsk_tgz = "../vendor/web-starter-kit/web-starter-kit-43823c998e90567d9b365336af4041e07b6d6d10.zip"
wsk_dir = File.dirname(wsk_tgz)
wsk_ready = "#{WSK}/README.md"  # Track extraction via the README.
file wsk_tgz do
  FileUtils.mkdir_p(wsk_dir) unless File.directory?(wsk_dir)
  cmd = "curl -L #{wsk_url} -o #{wsk_tgz}"
  puts(cmd) if verbose
  system(cmd)
end
file wsk_ready => wsk_tgz do
  cmd = "tar -xmz -f #{wsk_tgz} --strip-components 1 -C #{wsk_dir}"
  puts(cmd) if verbose
  system(cmd)
end


# The Octicons files might need to be downloaded.
# Octicons @v2.1.2
octicons_url = "https://github.com/github/octicons/releases/download/v2.1.2/octicons.zip"
octicons_zip = "../vendor/octicons/octicons-v2.1.2.zip"
octicons_dir = File.dirname(octicons_zip)
octicons_ready = "#{OCTICONS}/README.md"  # Track extraction via the README.
file octicons_zip do
  FileUtils.mkdir_p(octicons_dir) unless File.directory?(octicons_dir)
  cmd = "curl -L #{octicons_url} -o #{octicons_zip}"
  puts(cmd) if verbose
  system(cmd)
end
file octicons_ready => octicons_zip do
  cmd = "unzip -o #{octicons_zip} -d #{octicons_dir}"
  puts(cmd) if verbose
  system(cmd)
end


# The local WSK css file depends on all the WSK inputs.
CSS_OUT_WSK = "#{LOCAL_STYLES}/wsk.css"
wsk_css_files = [
  "#{WSK_STYLES}/h5bp.css",
  "#{WSK_STYLES}/components/components.css",
  "#{WSK_STYLES}/main.css",
]
wsk_css_files.each do |src|
  file src => wsk_ready
  file CSS_OUT_WSK => src
end
file CSS_OUT_WSK do
  css = ""
  # Concatenate WSK files.
  wsk_css_files.each do |wsk_css_file|
    css += File.read(wsk_css_file)
  end
  # Fix WSK paths.
  css = css.gsub('url("../../images', 'url("../images')
  # Prefix rules.
  prefixed = AutoprefixerRails.process(css, browsers: AUTOPREFIXER_BROWSERS)
  # Compress.
  sass_engine = Sass::Engine.new(prefixed.css, {
    :style => :compressed,
    :cache => false,
    :syntax => :scss,
  })
  compressed = sass_engine.render
  # Output.
  cssdir = File.dirname(CSS_OUT_WSK)
  FileUtils.mkdir_p(cssdir) unless File.directory?(cssdir)
  File.write(CSS_OUT_WSK, compressed)
end

# The local WSK css file depends on all the WSK inputs.
CSS_OUT_OCTICONS = "#{LOCAL_STYLES}/octicons.css"
octicon_css_file = "#{OCTICONS}/octicons.css"
file octicon_css_file => octicons_ready
file CSS_OUT_OCTICONS => octicon_css_file do
  css = File.read(octicon_css_file)
  # Fix Octions path.
  css = css.gsub("url('octicons", "url('../images/octicons")
  # Prefix rules.
  prefixed = AutoprefixerRails.process(css, browsers: AUTOPREFIXER_BROWSERS)
  # Compress.
  sass_engine = Sass::Engine.new(prefixed.css, {
    :style => :compressed,
    :cache => false,
    :syntax => :scss,
  })
  compressed = sass_engine.render
  # Output.
  cssdir = File.dirname(CSS_OUT_OCTICONS)
  FileUtils.mkdir_p(cssdir) unless File.directory?(cssdir)
  File.write(CSS_OUT_OCTICONS, compressed)
end

CSS_OUTS = [
  CSS_OUT_WSK,
  CSS_OUT_OCTICONS,
]

# Note: WSK font files are not used and instead fonts are linked directly from
# Google Fonts, but they may be installed locally during development if desired.

# Each local icon file depends on its Octicons counterpart.
IMG_OUTS = []
octicons_files = [
  "#{OCTICONS}/octicons.eot",
  "#{OCTICONS}/octicons.svg",
  "#{OCTICONS}/octicons.ttf",
  "#{OCTICONS}/octicons.woff",
]
octicons_files.each do |src|
  file src => octicons_ready
  dst = src.sub(OCTICONS, LOCAL_IMAGES)
  IMG_OUTS.push(dst)
  file dst => src do
    dstdir = File.dirname(dst)
    FileUtils.mkdir_p(dstdir) unless File.directory?(dstdir)
    puts("cp #{src} #{dst}") if verbose
    FileUtils.cp(src, dst)
  end
end


# Tasks.
task :css => CSS_OUTS
task :img => IMG_OUTS
task :assets => [:css, :img]


task :build => [:assets] do
  cmd = "bundle exec jekyll build --trace"
  puts(cmd) if verbose
  system(cmd)
end


task :serve => [:assets] do
  cmd = "bundle exec jekyll serve --watch --trace"
  puts(cmd) if verbose
  system(cmd)
end


task :stage => [:clean, :assets] do
  cmd = "bundle exec jekyll build --trace --destination #{STAGING_AREA}"
  puts(cmd) if verbose
  system(cmd)
end


task :clean do
  clean_paths = [SITE, LOCAL_WSK]
  puts("rm #{clean_paths}") if verbose
  FileUtils.rm_rf(clean_paths)
end


task :default => [:build]
