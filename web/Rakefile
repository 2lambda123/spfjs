# Copyright 2014 Google Inc. All rights reserved.
#
# Use of this source code is governed by The MIT License.
# See the LICENSE file for details.

require "autoprefixer-rails"
require "fileutils"
require "json"
require "pathname"
require "sass"
require "tmpdir"
require "yaml"


SITE = "_site"
STAGING = "../../spfjs-gh-pages"
VENDOR = "../bower_components"
LOCAL = "assets/vendor"

SITE_INFO = YAML.load_file("_config.yml")
SITE_RELEASE = SITE_INFO["release"]
SITE_VERSION = SITE_INFO["version"]

begin
  BOWER = Pathname('../node_modules/bower/bin/bower').realpath
  JSDOX = Pathname('../node_modules/jsdox/bin/jsdox').realpath
rescue
  msg = "Required tools not found; please run the following:\n"
  msg += "    cd .. && npm install"
  raise msg
end

BOWER_INFO = JSON.parse(`cd .. && #{BOWER} --offline list --json`)

# Use an official SPF release instead of building from source.
SPF = "#{VENDOR}/spf"
SPF_INFO = BOWER_INFO["dependencies"]["spf"]["pkgMeta"]
SPF_VERSION = SPF_INFO["version"]
LOCAL_SPF = "#{LOCAL}/spf/#{SPF_VERSION}"

WSK = "#{VENDOR}/web-starter-kit/app"
WSK_INFO = BOWER_INFO["dependencies"]["web-starter-kit"]["pkgMeta"]
WSK_VERSION = WSK_INFO["version"]
LOCAL_WSK = "#{LOCAL}/wsk/#{WSK_VERSION}"

OCTICONS = "#{VENDOR}/octicons/octicons"
OCTICONS_INFO = BOWER_INFO["dependencies"]["octicons"]["pkgMeta"]
OCTICONS_VERSION = OCTICONS_INFO["version"]
LOCAL_OCTICONS = "#{LOCAL}/octicons/#{OCTICONS_VERSION}"

API_SRC = "../src/api.js"
API_OUT_DIR = "."
API_OUT = "#{API_OUT_DIR}/api.md"
API_TMPL_DIR = "_api"
API_TMPL = Dir.glob("#{API_TMPL_DIR}/*.mustache")
API_TOC = "_includes/apitoc.md"

AUTOPREFIXER_BROWSERS = [
  "ie >= 10",
  "ie_mob >= 10",
  "ff >= 30",
  "chrome >= 34",
  "safari >= 7",
  "opera >= 23",
  "ios >= 7",
  "android >= 4.4",
  "bb >= 10",
]


css_to_copy = {
  "#{LOCAL_OCTICONS}/octicons.css" => "#{OCTICONS}/octicons.css",
}
css_to_build = {
  "#{LOCAL_WSK}/styles/wsk.css" => [
      "#{WSK}/styles/h5bp.css",
      "#{WSK}/styles/components/components.css",
      "#{WSK}/styles/main.css",
    ]
}
img_to_copy = {
  "#{LOCAL_WSK}/images/icons/icons-hinted.ttf" => "#{WSK}/images/icons/icons-hinted.ttf",
  "#{LOCAL_WSK}/images/icons/icons.eot" => "#{WSK}/images/icons/icons.eot",
  "#{LOCAL_WSK}/images/icons/icons.svg" => "#{WSK}/images/icons/icons.svg",
  "#{LOCAL_WSK}/images/icons/icons.ttf" => "#{WSK}/images/icons/icons.ttf",
  "#{LOCAL_WSK}/images/icons/icons.woff" => "#{WSK}/images/icons/icons.woff",
  "#{LOCAL_WSK}/images/icons/icons.woff2" => "#{WSK}/images/icons/icons.woff2",
  "#{LOCAL_OCTICONS}/octicons.eot" => "#{OCTICONS}/octicons.eot",
  "#{LOCAL_OCTICONS}/octicons.svg" => "#{OCTICONS}/octicons.svg",
  "#{LOCAL_OCTICONS}/octicons.ttf" => "#{OCTICONS}/octicons.ttf",
  "#{LOCAL_OCTICONS}/octicons.woff" => "#{OCTICONS}/octicons.woff",
}
# Note: WSK font files are not used and instead fonts are linked directly from
# Google Fonts, but they may be installed locally during development if desired.
js_to_copy = {
  "#{LOCAL_SPF}/spf.js" => "#{SPF}/dist/spf.js",
}

all_to_copy = css_to_copy.merge(img_to_copy).merge(js_to_copy)
css_files = css_to_copy.merge(css_to_build).keys
img_files = img_to_copy.keys
js_files = js_to_copy.keys

all_to_copy.each do |dst, src|
  file dst => src do
    dstdir = File.dirname(dst)
    FileUtils.mkdir_p(dstdir) unless File.directory?(dstdir)
    puts("cp #{src} #{dst}") if verbose == true
    FileUtils.cp(src, dst)
  end
end

css_to_build.each do |dst, srcs|
  file dst => srcs do
    css = ""
    # Concatenate WSK files.
    srcs.each do |src|
      css += File.read(src)
    end
    # Fix WSK paths.
    css = css.gsub('url("../../images', 'url("../images')
    # Prefix rules.
    prefixed = AutoprefixerRails.process(css, browsers: AUTOPREFIXER_BROWSERS)
    # Compress.
    sass_engine = Sass::Engine.new(prefixed.css, {
      :style => :compressed,
      :cache => false,
      :syntax => :scss,
    })
    compressed = sass_engine.render
    # Output.
    dstdir = File.dirname(dst)
    FileUtils.mkdir_p(dstdir) unless File.directory?(dstdir)
    puts("scss #{srcs} > #{dst}") if verbose == true
    File.write(dst, compressed)
  end
end


api_files = [API_OUT, API_TOC]
api_srcs = API_TMPL.concat([API_SRC])
file API_OUT => api_srcs do
  tmpdir = Dir.mktmpdir()
  api_tmpfile = "#{tmpdir}/#{File.basename(API_SRC)}"
  cmd = "git cat-file -p v#{SITE_VERSION}:#{API_SRC} "
  cmd += "| sed '/@fileoverview/ a\\\n\\ * @version #{SITE_RELEASE}\n' "
  cmd += "> #{api_tmpfile}"
  puts(cmd) if verbose == true
  system(cmd)
  api_toc_base = File.join(File.dirname(API_TOC), File.basename(API_TOC, '.*'))
  cmd = "#{JSDOX} #{api_tmpfile} "
  cmd += "--templateDir #{API_TMPL_DIR} "
  cmd += "--index #{api_toc_base} "
  cmd += "--index-sort none "
  cmd += "--output #{API_OUT_DIR} "
  puts(cmd) if verbose == true
  system(cmd)
end
file API_TOC => API_OUT


# Tasks.
task :css => css_files
task :img => img_files
task :js => js_files
task :assets => [:css, :img, :js]
task :api => api_files
task :generated => [:api]


task :build => [:assets, :generated] do
  cmd = "bundle exec jekyll build --trace"
  puts(cmd) if verbose == true
  system(cmd)
end


task :serve => [:assets, :generated] do
  cmd = "bundle exec jekyll serve --watch --trace"
  puts(cmd) if verbose == true
  system(cmd)
end


task :stage => [:clean, :assets, :generated] do
  cmd = "bundle exec jekyll build --trace --destination #{STAGING}"
  puts(cmd) if verbose == true
  system(cmd)
end


task :clean do
  clean_paths = [SITE, LOCAL]
  puts("rm #{clean_paths}") if verbose == true
  FileUtils.rm_rf(clean_paths)
end


task :default => [:build]
