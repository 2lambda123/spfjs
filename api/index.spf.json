{
  "title": "SPF - API",
  "head": "\n<link rel=\"stylesheet\" name=\"roboto\" href=\"//fonts.googleapis.com/css?family=Roboto:300,600,900|Roboto+Condensed:300,300italic,400,700|Inconsolata:400\">\n<link rel=\"stylesheet\" name=\"wsk\" href=\"/spfjs/assets/vendor/wsk/0.4.0/styles/wsk.css\">\n<link rel=\"stylesheet\" name=\"octicons\" href=\"/spfjs/assets/vendor/octicons/2.1.2/octicons.css\">\n<link rel=\"stylesheet\" name=\"main\" href=\"/spfjs/assets/styles/main.css?t=2015-05-21T14%3A11%3A39-04%3A00\">\n\n",
  "body": {
    "content": "\n<main class=\"clear\">\n\n  <nav class=\"toc g-wide--1 g-medium--1\">\n    \n    <p>Functions</p>\n\n<ul>\n<li><a href=\"#spf.init\">spf.init</a></li>\n<li><a href=\"#spf.dispose\">spf.dispose</a></li>\n<li><a href=\"#spf.navigate\">spf.navigate</a></li>\n<li><a href=\"#spf.load\">spf.load</a></li>\n<li><a href=\"#spf.process\">spf.process</a></li>\n<li><a href=\"#spf.prefetch\">spf.prefetch</a></li>\n<li><a href=\"#spf.cache.remove\">spf.cache.remove</a></li>\n<li><a href=\"#spf.cache.clear\">spf.cache.clear</a></li>\n<li><a href=\"#spf.script.load\">spf.script.load</a></li>\n<li><a href=\"#spf.script.unload\">spf.script.unload</a></li>\n<li><a href=\"#spf.script.get\">spf.script.get</a></li>\n<li><a href=\"#spf.script.ready\">spf.script.ready</a></li>\n<li><a href=\"#spf.script.ignore\">spf.script.ignore</a></li>\n<li><a href=\"#spf.script.done\">spf.script.done</a></li>\n<li><a href=\"#spf.script.require\">spf.script.require</a></li>\n<li><a href=\"#spf.script.unrequire\">spf.script.unrequire</a></li>\n<li><a href=\"#spf.script.declare\">spf.script.declare</a></li>\n<li><a href=\"#spf.script.path\">spf.script.path</a></li>\n<li><a href=\"#spf.script.prefetch\">spf.script.prefetch</a></li>\n<li><a href=\"#spf.style.load\">spf.style.load</a></li>\n<li><a href=\"#spf.style.unload\">spf.style.unload</a></li>\n<li><a href=\"#spf.style.get\">spf.style.get</a></li>\n<li><a href=\"#spf.style.path\">spf.style.path</a></li>\n<li><a href=\"#spf.style.prefetch\">spf.style.prefetch</a></li>\n</ul>\n\n<p>Classes</p>\n\n<ul>\n<li><a href=\"#spf.singleresponse\">spf.SingleResponse</a></li>\n<li><a href=\"#spf.multipartresponse\">spf.MultipartResponse</a></li>\n<li><a href=\"#spf.requestoptions\">spf.RequestOptions</a></li>\n<li><a href=\"#spf.event\">spf.Event</a></li>\n<li><a href=\"#spf.eventdetail\">spf.EventDetail</a></li>\n<li><a href=\"#spf.taskscheduler\">spf.TaskScheduler</a></li>\n</ul>\n\n  </nav>\n\n  <article class=\"g-wide--3 g-wide--last g-medium--2 g-medium--last\">\n    <header class=\"page-header container\">\n      <h2 class=\"xxlarge text-divider\">API</h2>\n      \n        <p class=\"page-header__excerpt g-wide--push-1 g-wide--pull-1\">\n          The JS API reference.\n        </p>\n      \n    </header>\n    <div class=\"container\">\n      <p>The following API reference is for <strong>SPF 22 (v2.2.0)</strong>.</p>\n\n<hr>\n\n<h2 id=\"spf\">spf</h2>\n\n<p>The top-level SPF namespace.</p>\n\n<h3 id=\"spf.init\">spf.init</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.init(opt_config)</code><br>\nInitializes SPF.</p>\n\n<p><strong>Parameters</strong><br>\n<code>opt_config: Object</code><br>\nOptional global configuration object.  </p>\n\n<p><strong>Returns</strong><br>\n<code>boolean</code><br>\nWhether SPF was successfully initialized.  If the HTML5\n    history modification API is not supported, returns false.  </p>\n\n<h3 id=\"spf.dispose\">spf.dispose</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.dispose()</code><br>\nDisposes SPF.</p>\n\n<h3 id=\"spf.navigate\">spf.navigate</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.navigate(url, opt_options)</code><br>\nNavigates to a URL.</p>\n\n<p>A pushState history entry is added for the URL, and if successful, the\nnavigation is performed.  If not, the browser is redirected to the URL.\nDuring the navigation, first the content is requested.  If the reponse is\nsucessfully parsed, it is processed.  If not, the browser is redirected to\nthe URL.  Only a single navigation request can be in flight at once.  If a\nsecond URL is navigated to while a first is still pending, the first will be\ncancelled.</p>\n\n<p><strong>Parameters</strong><br>\n<code>url: string</code><br>\nThe URL to navigate to, without the SPF identifier.<br>\n<code>opt_options: Object | spf.RequestOptions</code><br>\nOptional request options.  </p>\n\n<h3 id=\"spf.load\">spf.load</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.load(url, opt_options)</code><br>\nLoads a URL.</p>\n\n<p>Similar to <a href=\"#spf.navigate\">spf.navigate</a>, but intended for traditional content\nupdates, not page navigation.  Not subject to restrictions on the number of\nsimultaneous requests.</p>\n\n<p><strong>Parameters</strong><br>\n<code>url: string</code><br>\nThe URL to load, without the SPF identifier.<br>\n<code>opt_options: Object | spf.RequestOptions</code><br>\nOptional request options.  </p>\n\n<p><strong>Returns</strong><br>\n<code>XMLHttpRequest</code><br>\nThe XHR of the current request.  </p>\n\n<h3 id=\"spf.process\">spf.process</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.process(response, opt_callback)</code><br>\nProcess a SPF response on the current page outside of a navigation flow.</p>\n\n<p><strong>Parameters</strong><br>\n<code>response: spf.SingleResponse | spf.MultipartResponse</code><br>\nThe SPF response\n    object to process.<br>\n<code>opt_callback: function</code><br>\nFunction to execute when processing is done; the argument is\n    the <code>response</code>.  </p>\n\n<h3 id=\"spf.prefetch\">spf.prefetch</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.prefetch(url, opt_options)</code><br>\nPrefetches a URL.</p>\n\n<p>Use to prime the SPF request cache with the content and the browser cache\nwith script and stylesheet URLs.  If the response is successfully parsed, it\nis preprocessed to prefetch scripts and stylesheets as well.</p>\n\n<p><strong>Parameters</strong><br>\n<code>url: string</code><br>\nThe URL to prefetch, without the SPF identifier.<br>\n<code>opt_options: Object | spf.RequestOptions</code><br>\nOptional request options.  </p>\n\n<p><strong>Returns</strong><br>\n<code>XMLHttpRequest</code><br>\nThe XHR of the current request.  </p>\n\n<h3 id=\"spf.singleresponse\">spf.SingleResponse</h3>\n\n<p><strong>Class</strong><br>\nDefinition for a single SPF response object.</p>\n\n<p><strong>Attributes</strong><br>\n<code>attr: Object.&lt;string, Object.&lt;string, string&gt;&gt; | undefined</code><br>\nMap of Element IDs to maps of attibute names to values for the Elements.<br>\n<code>body: Object.&lt;string, string&gt; | undefined</code><br>\nMap of Element IDs to HTML strings containing content of the Elements.  The\ncontent may contain script and/or style tags to be executed or installed.<br>\n<code>cacheKey: string | undefined</code><br>\nString of the cache key used to store this response.<br>\n<code>cacheType: string | undefined</code><br>\nString of the type of caching to use for this response.<br>\n<code>data: * | undefined</code><br>\nReserved for client data of any type.<br>\n<code>head: string | undefined</code><br>\nHTML string containing CSS and/or JS tags to execute or install.<br>\n<code>foot: string | undefined</code><br>\nHTML string containing JS and/or CSS tags to execute or install.<br>\n<code>redirect: string | undefined</code><br>\nString of a URL to request instead.<br>\n<code>reload: boolean | undefined</code><br>\nBoolean to indicate the page should be reloaded.<br>\n<code>timing: Object.&lt;(number|string|boolean)&gt; | undefined</code><br>\nMap of timing attributes to timestamp numbers.<br>\n<code>title: string | undefined</code><br>\nString of the new Document title.<br>\n<code>url: string | undefined</code><br>\nString of the correct URL for the current request. This will replace the\ncurrent URL in history.  </p>\n\n<h3 id=\"spf.multipartresponse\">spf.MultipartResponse</h3>\n\n<p><strong>Class</strong><br>\nDefinition for a multipart SPF response object.</p>\n\n<p><strong>Attributes</strong><br>\n<code>cacheKey: string | undefined</code><br>\nString of the key used to cache this response.<br>\n<code>cacheType: string | undefined</code><br>\nString of the type of caching to use for this response.<br>\n<code>parts: Array.&lt;spf.SingleResponse&gt; | undefined</code><br>\nList of response objects.<br>\n<code>timing: Object.&lt;string, number&gt; | undefined</code><br>\nMap of timing attributes to timestamp numbers.<br>\n<code>type: string</code><br>\nThe string &quot;multipart&quot;.  </p>\n\n<h3 id=\"spf.requestoptions\">spf.RequestOptions</h3>\n\n<p><strong>Class</strong><br>\nDefinition for options when requesting a URL.</p>\n\n<p><strong>Attributes</strong><br>\n<code>method: string | undefined</code><br>\nOptional method with which to send the request; defaults to &quot;GET&quot;.<br>\n<code>onError: function | undefined</code><br>\nOptional callback to execute if the request fails. The argument to the\ncallback will be an object that conforms to the <a href=\"#spf.eventdetail\">spf.EventDetail</a>\ninterface for &quot;spferror&quot; events (see <a href=\"#spf.event\">spf.Event</a>).<br>\n<code>onRequest: function | undefined</code><br>\nOptional callback to execute before sending a SPF request. The argument\nto the callback will be an object that conforms to the\n<a href=\"#spf.eventdetail\">spf.EventDetail</a> interface for &quot;spfrequest&quot; events (see\n<a href=\"#spf.event\">spf.Event</a>).<br>\n<code>onPartProcess: function | undefined</code><br>\nOptional callback to execute upon receiving a part of a multipart SPF\nresponse (see <a href=\"#spf.multipartresponse\">spf.MultipartResponse</a>).  Called before the part is\nprocessed, once per part of multipart responses; never called for\nsingle responses. If valid &quot;X-SPF-Response-Type: multipart&quot; and\n&quot;Transfer-Encoding: chunked&quot; headers are sent, then this callback will be\nexecuted on-the-fly as chunks are received.  The argument to the\ncallback will be an object that conforms to the <a href=\"#spf.eventdetail\">spf.EventDetail</a>\ninterface for &quot;spfpartprocess&quot; events (see <a href=\"#spf.event\">spf.Event</a>).<br>\n<code>onPartDone: function | undefined</code><br>\nOptional callback to execute after processing a part of a multipart SPF\nresponse (see <a href=\"#spf.multipartresponse\">spf.MultipartResponse</a>). Called once per part of\nmultipart responses; never called for single responses. If valid\n&quot;X-SPF-Response-Type: multipart&quot; and &quot;Transfer-Encoding: chunked&quot;\nheaders are sent, then this callback will be executed on-the-fly as\nchunks are received. The argument to the callback will be an object\nthat conforms to the <a href=\"#spf.eventdetail\">spf.EventDetail</a> interface for\n&quot;spfpartdone&quot; events (see <a href=\"#spf.event\">spf.Event</a>).<br>\n<code>onProcess: function | undefined</code><br>\nOptional callback to execute upon receiving a single SPF response (see\n<a href=\"#spf.singleresponse\">spf.SingleResponse</a>). Called before the response is processed;\nnever called for multipart responses. The argument to the callback will\nbe an object that conforms to the <a href=\"#spf.eventdetail\">spf.EventDetail</a> interface for\n&quot;spfprocess&quot; events (see <a href=\"#spf.event\">spf.Event</a>).<br>\n<code>onDone: function | undefined</code><br>\nOptional callback to execute when the response is done being processed.\nCalled once as the last event for both single and multipart responses (see\n<a href=\"#spf.singleresponse\">spf.SingleResponse</a> and <a href=\"#spf.multipartresponse\">spf.MultipartResponse</a>).  The argument\nto the callback will be an object that conforms to the\n<a href=\"#spf.eventdetail\">spf.EventDetail</a> interface for &quot;spfdone&quot; events (see\n<a href=\"#spf.event\">spf.Event</a>).<br>\n<code>postData: ArrayBuffer | Blob | Document | FormData | null | string | undefined</code><br>\nOptional data to send with the request.  Only used if the method is &quot;POST&quot;.  </p>\n\n<h3 id=\"spf.event\">spf.Event</h3>\n\n<p><strong>Class</strong><br>\nDefinition of CustomEvents dispatched by SPF.</p>\n\n<p><strong>Attributes</strong><br>\n<code>detail: spf.EventDetail</code><br>\nOptional detail object of the custom event.  </p>\n\n<h3 id=\"spf.eventdetail\">spf.EventDetail</h3>\n\n<p><strong>Class</strong><br>\nDefinition of the CustomEvent &quot;detail&quot; attribute (see <a href=\"#spf.event\">spf.Event</a>),\nalso used as an argument to callbacks in <a href=\"#spf.requestoptions\">spf.RequestOptions</a> objects.</p>\n\n<p><strong>Attributes</strong><br>\n<code>err: Error | undefined</code><br>\nThe Error that occurred; defined for &quot;spferror&quot; events,<br>\n<code>name: string | undefined</code><br>\nThe name of the scripts or stylesheets that will be unloaded; defined for\n&quot;spfjsbeforeunload&quot;, &quot;spfjsunload&quot;, &quot;spfcssbeforeunload&quot;, and\n&quot;spfcssunload&quot; events.<br>\n<code>part: spf.SingleResponse | undefined</code><br>\nOne part of a multipart SPF response (see <a href=\"#spf.multipartresponse\">spf.MultipartResponse</a>);\ndefined for &quot;spfpartprocess&quot; and &quot;spfpartdone&quot; events.<br>\n<code>previous: string | undefined</code><br>\nThe URL of the previous page; defined for &quot;spfhistory&quot; and\n&quot;spfrequest&quot; events.<br>\n<code>reason:</code><br>\nA string containing a reason code and a text explanation (debug only);\ndefined for the &quot;spfreload&quot; event.<br>\n<code>referer: string | undefined</code><br>\nThe URL of the previous page; defined for &quot;spfhistory&quot; and\n&quot;spfrequest&quot; events.<br>\n<code>response: spf.SingleResponse | spf.MultipartResponse | undefined</code><br>\nA complete SPF response; defined for &quot;spfprocess&quot; events as a single\nresponse and for &quot;spfdone&quot; events as either a single or multipart\nresponse (see <a href=\"#spf.singleresponse\">spf.SingleResponse</a> and <a href=\"#spf.multipartresponse\">spf.MultipartResponse</a>.<br>\n<code>target: Element | undefined</code><br>\nThe target element of a click; defined for &quot;spfclick&quot; events.<br>\n<code>url: string | undefined</code><br>\nThe URL of the request; defined for &quot;spferror&quot;, &quot;spfreload&quot;, &quot;spfclick&quot;,\n&quot;spfhistory&quot;, &quot;spfrequest&quot;, &quot;spfpartprocess&quot;, &quot;spfpartdone&quot;, &quot;spfprocess&quot;,\nand &quot;spfdone&quot; events - or - the URL of the script or stylesheet that will\nbe unloaded; defined for &quot;spfjsbeforeunload&quot;, &quot;spfjsunload&quot;,\n&quot;spfcssbeforeunload&quot;, and &quot;spfcssunload&quot; events.  </p>\n\n<h3 id=\"spf.taskscheduler\">spf.TaskScheduler</h3>\n\n<p><strong>Class</strong><br>\nDefinition of the Scheduler API which can be used by the application to\ncontrol execution of tasks.</p>\n\n<h3 id=\"spf.taskscheduler#addtask\">spf.TaskScheduler#addTask</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.TaskScheduler#addTask(task)</code><br>\nAdds a task to the scheduler, it is expected to be executed asynchronously as\ndetermined by the scheduler.</p>\n\n<p><strong>Parameters</strong><br>\n<code>task: function</code><br>\nThe task to execute.  </p>\n\n<p><strong>Returns</strong><br>\n<code>number</code><br>\nThe ID identifying the task.  </p>\n\n<h3 id=\"spf.taskscheduler#canceltask\">spf.TaskScheduler#cancelTask</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.TaskScheduler#cancelTask(id)</code><br>\nCancels a task if it has not been executed yet.</p>\n\n<p><strong>Parameters</strong><br>\n<code>id: number</code><br>\nThe ID of the task to cancel.  </p>\n\n<hr>\n\n<h2 id=\"spf.cache\">spf.cache</h2>\n\n<p>Namespace for cache handling functions.</p>\n\n<h3 id=\"spf.cache.remove\">spf.cache.remove</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.cache.remove(key)</code><br>\nRemoves an entry from cache.</p>\n\n<p>Removed entries will be completely removed from cache, affecting both normal\nnavigations as well as those triggered by a history change.</p>\n\n<p><strong>Parameters</strong><br>\n<code>key: string</code><br>\nThe key to remove from cache.  </p>\n\n<h3 id=\"spf.cache.clear\">spf.cache.clear</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.cache.clear()</code><br>\nClear all entries from cache.</p>\n\n<p>Removed entries will be completely removed from cache, affecting both normal\nnavigations as well as those triggered by a history change.</p>\n\n<hr>\n\n<h2 id=\"spf.script\">spf.script</h2>\n\n<p>Namespace for script-loading functions.</p>\n\n<h3 id=\"spf.script.load\">spf.script.load</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.load(url, name, opt_fn)</code><br>\nLoads a script asynchronously and defines a name to use for dependency\nmanagement and unloading.  See <a href=\"#spf.script.ready\">spf.script.ready</a> to wait for named\nscripts to be loaded and <a href=\"#spf.script.unload\">spf.script.unload</a> to remove previously\nloaded scripts.</p>\n\n<ul>\n<li><p>Subsequent calls to load the same URL will not reload the script.  To\nreload a script, unload it first with <a href=\"#spf.script.unload\">spf.script.unload</a>.  To\nunconditionally load a script, see <a href=\"#spf.script.get\">spf.script.get</a>.</p></li>\n<li><p>A name must be specified to identify the same script at different URLs.\n(For example, &quot;main-A.js&quot; and &quot;main-B.js&quot; are both &quot;main&quot;.)  When a name\nis specified, all other scripts with the same name will be unloaded\nbefore the callback is executed.  This allows switching between\nversions of the same script at different URLs.</p></li>\n<li><p>A callback can be specified to execute once the script has loaded.  The\ncallback will be executed each time, even if the script is not reloaded.</p></li>\n</ul>\n\n<p><strong>Parameters</strong><br>\n<code>url: string</code><br>\nURL of the script to load.<br>\n<code>name: string</code><br>\nName to identify the script.<br>\n<code>opt_fn: function</code><br>\nOptional callback function to execute when the\n    script is loaded.  </p>\n\n<h3 id=\"spf.script.unload\">spf.script.unload</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.unload(name)</code><br>\nUnloads a script identified by name.  See <a href=\"#spf.script.load\">spf.script.load</a>.</p>\n\n<p>NOTE: Unloading a script will prevent execution of ALL pending callbacks\nbut is NOT guaranteed to stop the browser loading a pending URL.</p>\n\n<p><strong>Parameters</strong><br>\n<code>name: string</code><br>\nThe name of the script(s).  </p>\n\n<h3 id=\"spf.script.get\">spf.script.get</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.get(url, opt_fn)</code><br>\nUnconditionally loads a script by dynamically creating an element and\nappending it to the document without regard for dependencies or whether it\nhas been loaded before.  A script directly loaded by this method cannot\nbe unloaded by name.  Compare to <a href=\"#spf.script.load\">spf.script.load</a>.</p>\n\n<p><strong>Parameters</strong><br>\n<code>url: string</code><br>\nThe URL of the script to load.<br>\n<code>opt_fn: function</code><br>\nFunction to execute when loaded.  </p>\n\n<h3 id=\"spf.script.ready\">spf.script.ready</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.ready(names, opt_fn, opt_require)</code><br>\nWaits for one or more scripts identified by name to be loaded and executes\nthe callback function.  See <a href=\"#spf.script.load\">spf.script.load</a> or\n<a href=\"#spf.script.done\">spf.script.done</a> to define names.</p>\n\n<p><strong>Parameters</strong><br>\n<code>names: string | Array.&lt;string&gt;</code><br>\nOne or more names.<br>\n<code>opt_fn: function</code><br>\nCallback function to execute when the\n    scripts have loaded.<br>\n<code>opt_require: function</code><br>\nCallback function to execute if names\n    are specified that have not yet been defined/loaded.  </p>\n\n<h3 id=\"spf.script.ignore\">spf.script.ignore</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.ignore(names, fn)</code><br>\n&quot;Ignores&quot; a script load by canceling execution of a pending callback.</p>\n\n<p>Stops waiting for one or more scripts identified by name to be loaded and\ncancels the pending callback execution.  The callback must have been\nregistered by <a href=\"#spf.script.load\">spf.script.load</a> or <a href=\"#spf.script.ready\">spf.script.ready</a>.  If the\ncallback was registered by <a href=\"#spf.script.ready\">spf.script.ready</a> and more than one name\nwas provided, the same names must be used here.</p>\n\n<p><strong>Parameters</strong><br>\n<code>names: string | Array.&lt;string&gt;</code><br>\nOne or more names.<br>\n<code>fn: function</code><br>\nCallback function to cancel.  </p>\n\n<h3 id=\"spf.script.done\">spf.script.done</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.done(name)</code><br>\nNotifies any waiting callbacks that <code>name</code> has completed loading.\nUse with <a href=\"#spf.script.ready\">spf.script.ready</a> for arbitrary readiness not directly tied\nto scripts.</p>\n\n<p><strong>Parameters</strong><br>\n<code>name: string</code><br>\nThe ready name.  </p>\n\n<h3 id=\"spf.script.require\">spf.script.require</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.require(names, opt_fn)</code><br>\nRecursively loads scripts identified by name, first loading\nany dependendent scripts.  Use <a href=\"#spf.script.declare\">spf.script.declare</a> to define\ndependencies.</p>\n\n<p><strong>Parameters</strong><br>\n<code>names: string | Array.&lt;string&gt;</code><br>\nOne or more names.<br>\n<code>opt_fn: function</code><br>\nCallback function to execute when the\n    scripts have loaded.  </p>\n\n<h3 id=\"spf.script.unrequire\">spf.script.unrequire</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.unrequire(names)</code><br>\nRecursively unloads scripts identified by name, first unloading\nany dependendent scripts.  Use <a href=\"#spf.script.declare\">spf.script.declare</a> to define\ndependencies.</p>\n\n<p><strong>Parameters</strong><br>\n<code>names: string | Array.&lt;string&gt;</code><br>\nOne or more names.  </p>\n\n<h3 id=\"spf.script.declare\">spf.script.declare</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.declare(deps, opt_urls)</code><br>\nSets the dependency map and optional URL map used when requiring scripts.\nSee <a href=\"#spf.script.require\">spf.script.require</a>.</p>\n\n<p><strong>Parameters</strong><br>\n<code>deps: Object.&lt;(string|Array.&lt;string&gt;)&gt;</code><br>\nThe dependency map.<br>\n<code>opt_urls: Object.&lt;string&gt;</code><br>\nThe optional URL map.  </p>\n\n<h3 id=\"spf.script.path\">spf.script.path</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.path(paths)</code><br>\nSets the path prefix or replacement map to use when resolving relative URLs.</p>\n\n<p>Note: The order in which replacements are made is not guaranteed.</p>\n\n<p><strong>Parameters</strong><br>\n<code>paths: string | Object.&lt;string&gt;</code><br>\nThe paths.  </p>\n\n<h3 id=\"spf.script.prefetch\">spf.script.prefetch</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.script.prefetch(urls)</code><br>\nPrefetchs one or more scripts; the scripts will be requested but not loaded.\nUse to prime the browser cache and avoid needing to request the script when\nsubsequently loaded.  See <a href=\"#spf.script.load\">spf.script.load</a>.</p>\n\n<p><strong>Parameters</strong><br>\n<code>urls: string | Array.&lt;string&gt;</code><br>\nOne or more URLs of scripts to prefetch.  </p>\n\n<hr>\n\n<h2 id=\"spf.style\">spf.style</h2>\n\n<p>Namespace for stylesheet-loading functions.</p>\n\n<h3 id=\"spf.style.load\">spf.style.load</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.style.load(url, name, opt_fn)</code><br>\nLoads a stylesheet asynchronously and defines a name to use for dependency\nmanagement and unloading.  See <a href=\"#spf.script.unload\">spf.script.unload</a> to remove previously\nloaded stylesheets.</p>\n\n<ul>\n<li><p>Subsequent calls to load the same URL will not reload the stylesheet.  To\nreload a stylesheet, unload it first with <a href=\"#spf.script.unload\">spf.script.unload</a>.  To\nunconditionally load a stylesheet, see <a href=\"#spf.script.get\">spf.script.get</a>.</p></li>\n<li><p>A name must be specified to identify the same stylesheet at different URLs.\n(For example, &quot;main-A.css&quot; and &quot;main-B.css&quot; are both &quot;main&quot;.)  When a name\nis specified, all other stylesheets with the same name will be unloaded.\nThis allows switching between versions of the same stylesheet at different\nURLs.</p></li>\n<li><p>A callback can be specified to execute once the stylesheet has loaded.  The\ncallback will be executed each time, even if the stylesheet is not\nreloaded.  NOTE: Unlike scripts, this callback is best effort and is\nsupported in the following browser versions: IE 6, Chrome 19, Firefox 9,\nSafari 6.</p></li>\n</ul>\n\n<p><strong>Parameters</strong><br>\n<code>url: string</code><br>\nURL of the stylesheet to load.<br>\n<code>name: string</code><br>\nName to identify the stylesheet.<br>\n<code>opt_fn: function</code><br>\nOptional callback function to execute when the\n    stylesheet is loaded.  </p>\n\n<h3 id=\"spf.style.unload\">spf.style.unload</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.style.unload(name)</code><br>\nUnloads a stylesheet identified by name.  See <a href=\"#spf.script.load\">spf.script.load</a>.</p>\n\n<p><strong>Parameters</strong><br>\n<code>name: string</code><br>\nName of the stylesheet.  </p>\n\n<h3 id=\"spf.style.get\">spf.style.get</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.style.get(url)</code><br>\nUnconditionally loads a stylesheet by dynamically creating an element and\nappending it to the document without regard for whether it has been loaded\nbefore. A stylesheet directly loaded by this method cannot be unloaded by\nname.  Compare to <a href=\"#spf.script.load\">spf.script.load</a>.</p>\n\n<p><strong>Parameters</strong><br>\n<code>url: string</code><br>\nURL of the stylesheet to load.  </p>\n\n<h3 id=\"spf.style.path\">spf.style.path</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.style.path(paths)</code><br>\nSets the path prefix or replacement map to use when resolving relative URLs.</p>\n\n<p>Note: The order in which replacements are made is not guaranteed.</p>\n\n<p><strong>Parameters</strong><br>\n<code>paths: string | Object.&lt;string&gt;</code><br>\nThe paths.  </p>\n\n<h3 id=\"spf.style.prefetch\">spf.style.prefetch</h3>\n\n<p><strong>Function</strong><br>\n<code>spf.style.prefetch(urls)</code><br>\nPrefetchs one or more stylesheets; the stylesheets will be requested but not\nloaded. Use to prime the browser cache and avoid needing to request the\nstylesheet when subsequently loaded.  See <a href=\"#spf.script.load\">spf.script.load</a>.</p>\n\n<p><strong>Parameters</strong><br>\n<code>urls: string | Array.&lt;string&gt;</code><br>\nOne or more stylesheet URLs to prefetch.  </p>\n\n    </div>\n  </article>\n\n</main>\n\n\n"
  },
  "attr": {
    "body": {
      "class": "api"
    }
  },
  "foot": "\n<script name=\"spf\" src=\"/spfjs/assets/vendor/spf/2.1.1/spf.js\"></script>\n<script name=\"main\" src=\"/spfjs/assets/scripts/main.js?t=2015-05-21T14%3A11%3A39-04%3A00\"></script>\n\n<script name=\"analytics\">\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n</script>\n<script>\n  if (window.location.hostname == 'youtube.github.io') {\n    ga('create', 'UA-52278317-1', 'auto');\n    ga('send', 'pageview');\n  }\n</script>\n\n"
}